package com.github.tm.glink.core.operator;

import com.github.tm.glink.features.Point;
import com.github.tm.glink.core.index.GeographicalGridIndex;
import com.github.tm.glink.core.operator.process.PairIndexRangeJoinProcess;
import com.github.tm.glink.core.operator.process.RangeJoinIndexAssigner;
import org.apache.flink.api.java.tuple.Tuple2;
import org.apache.flink.streaming.api.datastream.DataStream;
import org.apache.flink.streaming.api.windowing.assigners.TumblingEventTimeWindows;
import org.apache.flink.streaming.api.windowing.time.Time;

/**
 * Perform range join on all events. It is done by following steps:
 * 1. Partition the points into several parallel sub-operators according to location, and may with some redundancy,
 *  when the point locates near the edges of grid it located at, it will also be assigned with a index of the
 *  neighbor grid.
 * 2. Window the indexed data stream in the style of tumbling time window.
 * 3. Construct R-tree with data collected by the window literately by inserting one local point a time, meanwhile, for
 *  each point, generate a point-centered square as a query range, each outputs several tuples composed of 2 neighbor points.
 * Note: this operator get pair results without redundant.
 * @author Yu Liebing
 */
public class PairRangeJoin {
  /**
   * Get a neighbor stream generated by the points received in a time window. Each item in the neighbor stream
   * indicates two points from at most a certain distance.
   * @param geoDataStream The input point data stream to process DBSCAN
   * @param windowSize The size of a tumbling time window, which is based on event time.
   * @param distance Distance(meters) value to search for neighbors.
   * @param gridWidth The width of grids to define {@link GeographicalGridIndex}.
   * @return A neighbor stream.
   */
  public static DataStream<Tuple2<Point, Point>> pairRangeJoin(
          DataStream<Point> geoDataStream,
          int windowSize,
          double distance,
          double gridWidth) {
    return geoDataStream
            .flatMap(new RangeJoinIndexAssigner(distance, gridWidth, false))
            .keyBy(p -> p.f1)
            .window(TumblingEventTimeWindows.of(Time.seconds(windowSize)))
            .apply(new PairIndexRangeJoinProcess(distance));
  }
}
